// Generated by CoffeeScript 1.4.0
/*

Stand alone module for cookies/local storage/session storage
*/

var storageModule,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

storageModule = (function(window, document) {
  var component, componentFactory, components, cookiesComponent, defaultSettings, factoryInstance, getComponent, localStorageComponent, merge_options, sessionStorageComponent, settings, storageComponent;
  settings = defaultSettings = {
    storageType: 'cookies',
    debug: false,
    raw: false,
    json: false
  };
  factoryInstance = component = null;
  merge_options = function(objects) {
    var attr, object;
    for (object in objects) {
      for (attr in objects[object]) {
        settings[attr] = objects[object][attr];
      }
    }
    return settings;
  };
  storageComponent = (function() {

    function storageComponent() {}

    storageComponent.prototype.setValue = function(value) {
      if (settings.json) {
        return JSON.stringify(value);
      } else {
        return String(value);
      }
    };

    storageComponent.prototype.getValue = function(value) {
      if (settings.json) {
        return JSON.parse(value);
      } else {
        return value;
      }
    };

    return storageComponent;

  })();
  cookiesComponent = (function(_super) {

    __extends(cookiesComponent, _super);

    function cookiesComponent() {
      this.write = __bind(this.write, this);
      this.pluses = /\+/g;
      this.raw = function(string) {
        return string;
      };
      this.decoded = function(string) {
        return decodeURIComponent(string.replace(this.pluses, ' '));
      };
    }

    cookiesComponent.prototype.write = function(name, value) {
      var days, time;
      if (value === null) {
        time = -1;
      }
      if (typeof settings.expires === 'number' && time !== -1) {
        days = settings.expires;
        time = new Date();
        time.setDate(time.getDate() + days);
      } else if (time === -1) {
        time = new Date();
        time.setDate(time.getDate() - 1);
      }
      value = this.setValue(value);
      return document.cookie = [encodeURIComponent(name), '=', (settings.raw ? value : encodeURIComponent(value)), (time ? '; expires=' + time.toUTCString() : ''), (settings.path ? '; path=' + settings.path : ''), (settings.domain ? '; domain=' + settings.domain : ''), (settings.secure ? '; secure' : '')].join('');
    };

    cookiesComponent.prototype.read = function(name) {
      var cookie, cookies, decode, part, _i, _len;
      decode = (settings.raw ? this.raw : this.decoded);
      cookies = document.cookie.split('; ');
      for (_i = 0, _len = cookies.length; _i < _len; _i++) {
        cookie = cookies[_i];
        part = cookie.split('=');
        if (decode(part.shift()) === name) {
          cookie = decode(part.join('='));
          return this.getValue(cookie);
        }
      }
    };

    cookiesComponent.prototype.unset = function(name) {
      return this.write(name, null);
    };

    cookiesComponent.prototype.isset = function(name) {
      var cookie, cookies, decode, part, _i, _len;
      decode = (settings.raw ? this.raw : this.decoded);
      if (document.cookie != null) {
        cookies = document.cookie.split('; ');
        for (_i = 0, _len = cookies.length; _i < _len; _i++) {
          cookie = cookies[_i];
          part = cookie.split('=');
          if (decode(part.shift()) === name) {
            return true;
          }
        }
      }
      return false;
    };

    cookiesComponent.prototype.getAll = function() {
      var allData, cookie, cookies, decode, name, part, _i, _len;
      decode = (settings.raw ? this.raw : this.decoded);
      cookies = document.cookie.split('; ');
      allData = {};
      for (_i = 0, _len = cookies.length; _i < _len; _i++) {
        cookie = cookies[_i];
        part = cookie.split('=');
        name = decode(part.shift());
        cookie = decode(part.join('='));
        allData[name] = cookie;
      }
      return allData;
    };

    return cookiesComponent;

  })(storageComponent);
  sessionStorageComponent = (function(_super) {

    __extends(sessionStorageComponent, _super);

    function sessionStorageComponent() {}

    sessionStorageComponent.prototype.write = function(name, value) {
      return sessionStorage[name] = this.setValue(value);
    };

    sessionStorageComponent.prototype.read = function(name) {
      return this.getValue(sessionStorage[name]);
    };

    sessionStorageComponent.prototype.unset = function(name) {
      return delete sessionStorage[name];
    };

    sessionStorageComponent.prototype.isset = function(name) {
      return sessionStorage.hasOwnProp(name);
    };

    sessionStorageComponent.prototype.getAll = function() {
      var allData, attr;
      allData = {};
      for (attr in sessionStorage) {
        allData[attr] = this.getValue(sessionStorage[attr]);
      }
      return allData;
    };

    return sessionStorageComponent;

  })(storageComponent);
  localStorageComponent = (function(_super) {

    __extends(localStorageComponent, _super);

    function localStorageComponent() {}

    localStorageComponent.prototype.write = function(name, value) {
      return localStorage.setItem(this.setValue(value));
    };

    localStorageComponent.prototype.read = function(name) {
      return this.getValue(localStorage.getItem(name));
    };

    localStorageComponent.prototype.unset = function(name) {
      return localStorage.removeItem(name);
    };

    localStorageComponent.prototype.isset = function(name) {
      return localStorage.hasOwnProp(name);
    };

    localStorageComponent.prototype.getAll = function() {
      var allData, attr;
      allData = {};
      for (attr in localStorage) {
        allData[attr] = this.getValue(localStorage[attr]);
      }
      return allData;
    };

    return localStorageComponent;

  })(storageComponent);
  components = {
    cookiesComponent: cookiesComponent,
    localStorageComponent: localStorageComponent,
    sessionStorageComponent: sessionStorageComponent
  };
  componentFactory = (function() {

    function componentFactory() {
      this.createComponent = __bind(this.createComponent, this);

    }

    componentFactory.prototype.createComponent = function() {
      var componentClass;
      componentClass = 'cookies';
      switch (settings.storageType) {
        case 'localStorage':
        case 'sessionStorage':
          if (!(typeof Storage !== "undefined" && Storage !== null)) {
            settings.storageType = 'cookies';
          }
          componentClass = settings.storageType;
      }
      componentClass = components[settings.storageType + 'Component'];
      return new componentClass();
    };

    return componentFactory;

  })();
  getComponent = function() {
    if (component === null) {
      factoryInstance = new componentFactory();
      component = factoryInstance.createComponent();
    }
    return component;
  };
  return {
    setup: function(newSettings) {
      newSettings = newSettings || {};
      settings = merge_options({
        defaultSettings: defaultSettings,
        newSettings: newSettings
      });
      return getComponent();
    },
    write: function(name, value) {
      return getComponent().write(name, value);
    },
    read: function(name) {
      return getComponent().read(name);
    },
    unset: function(name) {
      return getComponent().unset(name);
    },
    isset: function(name) {
      return getComponent().isset(name);
    },
    getAll: function() {
      return getComponent().getAll();
    }
  };
})(window, document);
